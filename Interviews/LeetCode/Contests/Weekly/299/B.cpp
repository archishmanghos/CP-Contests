
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;



class Solution {
public:
	long long dp(long long index, long long house, int &n, int &mod, vector<vector<long long>> &cache){
		if(index == n) return 1;
		if(cache[index][house] != -1) return cache[index][house];

		long long ans = 0;
		if(house){
			ans = ((dp(index + 1, 0, n, mod, cache) % mod) + (dp(index + 1, 1, n, mod, cache)) % mod) % mod;
		}else {
			ans = dp(index + 1, 1, n, mod, cache) % mod;
		}

		return cache[index][house] = ans;
	}
    int countHousePlacements(int n) {
    	int mod = 1e9 + 7;
    	vector<vector<long long>> cache(n, vector<long long>(2, -1));
        long long houseOnEachSide = dp(0, 1, n, mod, cache);
        int ans = ((houseOnEachSide % mod) * (houseOnEachSide % mod)) % mod;
        return ans;
    }
};


int main() {

  
  	Solution leetcode2IDE;
	int n1 = 1;
	int output_1 = 4;
	if(leetcode2IDE.countHousePlacements(n1)==output_1){
		cout << "Sample #1 : Accepted" << endl;
	}else{
		cout << "Sample #1 : Wrong Answer" << endl;
	}

	int n2 = 2;
	int output_2 = 9;
	if(leetcode2IDE.countHousePlacements(n2)==output_2){
		cout << "Sample #2 : Accepted" << endl;
	}else{
		cout << "Sample #2 : Wrong Answer" << endl;
	}

	


  return 0;
}
