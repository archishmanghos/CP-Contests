
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;



class Solution {
public:
	string integerToString(int num){
		if(num == 0) return "0";
		string ans = "";
		while(num > 0){
			ans += ((num % 10) + '0');
			num /= 10;
		}

		reverse(ans.begin(), ans.end());
		return ans;
	}

	long stringToInteger(string s){
		long ans = 0, j = 1;
		reverse(s.begin(), s.end());
		for(int i = 0; i < s.size(); i++){
			ans += (s[i] - '0') * j;
			j *= 10;
		}

		return ans;
	}

    int divisorSubstrings(int num, int k) {
        string n = integerToString(num);
        int ans = 0;
        for(int i = 0; i <= (n.size() - k); i++){
        	string nowS = n.substr(i, k);
        	long nowSInt = stringToInteger(nowS);
        	if(nowSInt > 0 and	num % nowSInt == 0) ans += 1;
        }

        return ans;
    }
};


int main() {

  
  	Solution leetcode2IDE;
	int num1 = 240;
	int k1 = 2;
	int output_1 = 2;
	if(leetcode2IDE.divisorSubstrings(num1,k1)==output_1){
		cout << "Sample #1 : Accepted" << endl;
	}else{
		cout << "Sample #1 : Wrong Answer" << endl;
	}

	int num2 = 430043;
	int k2 = 2;
	int output_2 = 2;
	if(leetcode2IDE.divisorSubstrings(num2,k2)==output_2){
		cout << "Sample #2 : Accepted" << endl;
	}else{
		cout << "Sample #2 : Wrong Answer" << endl;
	}

	


  return 0;
}
